const e=new TextEncoder;const t=new TextDecoder;function r(e,t){const r=new Uint8Array(e.length+t.length);return r.set(e,0),r.set(t,e.length),r}function n(e,t,r=0){r=Math.max(0,Math.min(r,t.byteLength));const n=t.byteLength-r;return e.byteLength>n&&(e=e.subarray(0,n)),t.set(e,r),e.byteLength}class i extends Error{constructor(e){super(e),this.name="DenoStdInternalError"}}function o(e,t=""){if(!e)throw new i(t)}const s="\r".charCodeAt(0),a="\n".charCodeAt(0);class h extends Error{constructor(e){super("Buffer full"),this.partial=e,this.name="BufferFullError"}}class c extends Deno.errors.UnexpectedEof{constructor(){super("Encountered UnexpectedEof, data only partially read"),this.name="PartialReadError"}}class l{constructor(e,t=4096){this.r=0,this.w=0,this.eof=!1,t<16&&(t=16),this._reset(new Uint8Array(t),e)}static create(e,t=4096){return e instanceof l?e:new l(e,t)}size(){return this.buf.byteLength}buffered(){return this.w-this.r}async _fill(){if(this.r>0&&(this.buf.copyWithin(0,this.r,this.w),this.w-=this.r,this.r=0),this.w>=this.buf.byteLength)throw Error("bufio: tried to fill full buffer");for(let e=100;e>0;e--){const e=await this.rd.read(this.buf.subarray(this.w));if(null===e)return void(this.eof=!0);if(o(e>=0,"negative read"),this.w+=e,e>0)return}throw new Error("No progress after 100 read() calls")}reset(e){this._reset(this.buf,e)}_reset(e,t){this.buf=e,this.rd=t,this.eof=!1}async read(e){let t=e.byteLength;if(0===e.byteLength)return t;if(this.r===this.w){if(e.byteLength>=this.buf.byteLength){const t=await this.rd.read(e);return o((t??0)>=0,"negative read"),t}if(this.r=0,this.w=0,t=await this.rd.read(this.buf),0===t||null===t)return t;o(t>=0,"negative read"),this.w+=t}const r=n(this.buf.subarray(this.r,this.w),e,0);return this.r+=r,r}async readFull(e){let t=0;for(;t<e.length;)try{const r=await this.read(e.subarray(t));if(null===r){if(0===t)return null;throw new c}t+=r}catch(r){throw r.partial=e.subarray(0,t),r}return e}async readByte(){for(;this.r===this.w;){if(this.eof)return null;await this._fill()}const e=this.buf[this.r];return this.r++,e}async readString(e){if(1!==e.length)throw new Error("Delimiter should be a single character");const t=await this.readSlice(e.charCodeAt(0));return null===t?null:(new TextDecoder).decode(t)}async readLine(){let e;try{e=await this.readSlice(a)}catch(e){let{partial:t}=e;if(o(t instanceof Uint8Array,"bufio: caught error from `readSlice()` without `partial` property"),!(e instanceof h))throw e;return!this.eof&&t.byteLength>0&&t[t.byteLength-1]===s&&(o(this.r>0,"bufio: tried to rewind past start of buffer"),this.r--,t=t.subarray(0,t.byteLength-1)),{line:t,more:!this.eof}}if(null===e)return null;if(0===e.byteLength)return{line:e,more:!1};if(e[e.byteLength-1]==a){let t=1;e.byteLength>1&&e[e.byteLength-2]===s&&(t=2),e=e.subarray(0,e.byteLength-t)}return{line:e,more:!1}}async readSlice(e){let t,r=0;for(;;){let n=this.buf.subarray(this.r+r,this.w).indexOf(e);if(n>=0){n+=r,t=this.buf.subarray(this.r,this.r+n+1),this.r+=n+1;break}if(this.eof){if(this.r===this.w)return null;t=this.buf.subarray(this.r,this.w),this.r=this.w;break}if(this.buffered()>=this.buf.byteLength){this.r=this.w;const e=this.buf,t=this.buf.slice(0);throw this.buf=t,new h(e)}r=this.w-this.r;try{await this._fill()}catch(e){throw e.partial=t,e}}return t}async peek(e){if(e<0)throw Error("negative count");let t=this.w-this.r;for(;t<e&&t<this.buf.byteLength&&!this.eof;){try{await this._fill()}catch(e){throw e.partial=this.buf.subarray(this.r,this.w),e}t=this.w-this.r}if(0===t&&this.eof)return null;if(t<e&&this.eof)return this.buf.subarray(this.r,this.r+t);if(t<e)throw new h(this.buf.subarray(this.r,this.w));return this.buf.subarray(this.r,this.r+e)}}class d extends class{constructor(){this.usedBufferBytes=0,this.err=null}size(){return this.buf.byteLength}available(){return this.buf.byteLength-this.usedBufferBytes}buffered(){return this.usedBufferBytes}}{constructor(e,t=4096){super(),this.writer=e,t<=0&&(t=4096),this.buf=new Uint8Array(t)}static create(e,t=4096){return e instanceof d?e:new d(e,t)}reset(e){this.err=null,this.usedBufferBytes=0,this.writer=e}async flush(){if(null!==this.err)throw this.err;if(0!==this.usedBufferBytes){try{await Deno.writeAll(this.writer,this.buf.subarray(0,this.usedBufferBytes))}catch(e){throw this.err=e,e}this.buf=new Uint8Array(this.buf.length),this.usedBufferBytes=0}}async write(e){if(null!==this.err)throw this.err;if(0===e.length)return 0;let t=0,r=0;for(;e.byteLength>this.available();){if(0===this.buffered())try{r=await this.writer.write(e)}catch(e){throw this.err=e,e}else r=n(e,this.buf,this.usedBufferBytes),this.usedBufferBytes+=r,await this.flush();t+=r,e=e.subarray(r)}return r=n(e,this.buf,this.usedBufferBytes),this.usedBufferBytes+=r,t+=r,t}}function u(){let e;const t=new Promise((t,r)=>{e={resolve:t,reject:r}});return Object.assign(t,e)}class f{constructor(){this.iteratorCount=0,this.yields=[],this.throws=[],this.signal=u()}add(e){++this.iteratorCount,this.callIteratorNext(e)}async callIteratorNext(e){try{const{value:t,done:r}=await e.next();r?--this.iteratorCount:this.yields.push({iterator:e,value:t})}catch(e){this.throws.push(e)}this.signal.resolve()}async*iterate(){for(;this.iteratorCount>0;){await this.signal;for(let e=0;e<this.yields.length;e++){const{iterator:t,value:r}=this.yields[e];yield r,this.callIteratorNext(t)}if(this.throws.length){for(const e of this.throws)throw e;this.throws.length=0}this.yields.length=0,this.signal=u()}}[Symbol.asyncIterator](){return this.iterate()}}const w=/[^\t\x20-\x7e\x80-\xff]/g;function y(e){return null==e?"":(r=e,t.decode(r));var r}function g(e){return e.charCodeAt(0)}class p{constructor(e){this.r=e}async readLine(){const e=await this.readLineSlice();return null===e?null:y(e)}async readMIMEHeader(){const e=new Headers;let t,r=await this.r.peek(1);if(null===r)return null;if(r[0]!=g(" ")&&r[0]!=g("\t")||(t=await this.readLineSlice()),r=await this.r.peek(1),null===r)throw new Deno.errors.UnexpectedEof;if(r[0]==g(" ")||r[0]==g("\t"))throw new Deno.errors.InvalidData("malformed MIME header initial line: "+y(t));for(;;){const t=await this.readLineSlice();if(null===t)throw new Deno.errors.UnexpectedEof;if(0===t.byteLength)return e;let r=t.indexOf(g(":"));if(r<0)throw new Deno.errors.InvalidData("malformed MIME header line: "+y(t));const n=y(t.subarray(0,r));if(""==n)continue;for(r++;r<t.byteLength&&(t[r]==g(" ")||t[r]==g("\t"));)r++;const i=y(t.subarray(r)).replace(w,encodeURI);try{e.append(n,i)}catch{}}}async readLineSlice(){let e;for(;;){const t=await this.r.readLine();if(null===t)return null;const{line:n,more:i}=t;if(!e&&!i)return 0===this.skipSpace(n)?new Uint8Array(0):n;if(e=e?r(e,n):n,!i)break}return e}skipSpace(e){let t=0;for(let r=0;r<e.length;r++)e[r]!==g(" ")&&e[r]!==g("\t")&&t++;return t}}var b;!function(e){e[e.Continue=100]="Continue",e[e.SwitchingProtocols=101]="SwitchingProtocols",e[e.Processing=102]="Processing",e[e.EarlyHints=103]="EarlyHints",e[e.OK=200]="OK",e[e.Created=201]="Created",e[e.Accepted=202]="Accepted",e[e.NonAuthoritativeInfo=203]="NonAuthoritativeInfo",e[e.NoContent=204]="NoContent",e[e.ResetContent=205]="ResetContent",e[e.PartialContent=206]="PartialContent",e[e.MultiStatus=207]="MultiStatus",e[e.AlreadyReported=208]="AlreadyReported",e[e.IMUsed=226]="IMUsed",e[e.MultipleChoices=300]="MultipleChoices",e[e.MovedPermanently=301]="MovedPermanently",e[e.Found=302]="Found",e[e.SeeOther=303]="SeeOther",e[e.NotModified=304]="NotModified",e[e.UseProxy=305]="UseProxy",e[e.TemporaryRedirect=307]="TemporaryRedirect",e[e.PermanentRedirect=308]="PermanentRedirect",e[e.BadRequest=400]="BadRequest",e[e.Unauthorized=401]="Unauthorized",e[e.PaymentRequired=402]="PaymentRequired",e[e.Forbidden=403]="Forbidden",e[e.NotFound=404]="NotFound",e[e.MethodNotAllowed=405]="MethodNotAllowed",e[e.NotAcceptable=406]="NotAcceptable",e[e.ProxyAuthRequired=407]="ProxyAuthRequired",e[e.RequestTimeout=408]="RequestTimeout",e[e.Conflict=409]="Conflict",e[e.Gone=410]="Gone",e[e.LengthRequired=411]="LengthRequired",e[e.PreconditionFailed=412]="PreconditionFailed",e[e.RequestEntityTooLarge=413]="RequestEntityTooLarge",e[e.RequestURITooLong=414]="RequestURITooLong",e[e.UnsupportedMediaType=415]="UnsupportedMediaType",e[e.RequestedRangeNotSatisfiable=416]="RequestedRangeNotSatisfiable",e[e.ExpectationFailed=417]="ExpectationFailed",e[e.Teapot=418]="Teapot",e[e.MisdirectedRequest=421]="MisdirectedRequest",e[e.UnprocessableEntity=422]="UnprocessableEntity",e[e.Locked=423]="Locked",e[e.FailedDependency=424]="FailedDependency",e[e.TooEarly=425]="TooEarly",e[e.UpgradeRequired=426]="UpgradeRequired",e[e.PreconditionRequired=428]="PreconditionRequired",e[e.TooManyRequests=429]="TooManyRequests",e[e.RequestHeaderFieldsTooLarge=431]="RequestHeaderFieldsTooLarge",e[e.UnavailableForLegalReasons=451]="UnavailableForLegalReasons",e[e.InternalServerError=500]="InternalServerError",e[e.NotImplemented=501]="NotImplemented",e[e.BadGateway=502]="BadGateway",e[e.ServiceUnavailable=503]="ServiceUnavailable",e[e.GatewayTimeout=504]="GatewayTimeout",e[e.HTTPVersionNotSupported=505]="HTTPVersionNotSupported",e[e.VariantAlsoNegotiates=506]="VariantAlsoNegotiates",e[e.InsufficientStorage=507]="InsufficientStorage",e[e.LoopDetected=508]="LoopDetected",e[e.NotExtended=510]="NotExtended",e[e.NetworkAuthenticationRequired=511]="NetworkAuthenticationRequired"}(b||(b={}));const L=new Map([[b.Continue,"Continue"],[b.SwitchingProtocols,"Switching Protocols"],[b.Processing,"Processing"],[b.EarlyHints,"Early Hints"],[b.OK,"OK"],[b.Created,"Created"],[b.Accepted,"Accepted"],[b.NonAuthoritativeInfo,"Non-Authoritative Information"],[b.NoContent,"No Content"],[b.ResetContent,"Reset Content"],[b.PartialContent,"Partial Content"],[b.MultiStatus,"Multi-Status"],[b.AlreadyReported,"Already Reported"],[b.IMUsed,"IM Used"],[b.MultipleChoices,"Multiple Choices"],[b.MovedPermanently,"Moved Permanently"],[b.Found,"Found"],[b.SeeOther,"See Other"],[b.NotModified,"Not Modified"],[b.UseProxy,"Use Proxy"],[b.TemporaryRedirect,"Temporary Redirect"],[b.PermanentRedirect,"Permanent Redirect"],[b.BadRequest,"Bad Request"],[b.Unauthorized,"Unauthorized"],[b.PaymentRequired,"Payment Required"],[b.Forbidden,"Forbidden"],[b.NotFound,"Not Found"],[b.MethodNotAllowed,"Method Not Allowed"],[b.NotAcceptable,"Not Acceptable"],[b.ProxyAuthRequired,"Proxy Authentication Required"],[b.RequestTimeout,"Request Timeout"],[b.Conflict,"Conflict"],[b.Gone,"Gone"],[b.LengthRequired,"Length Required"],[b.PreconditionFailed,"Precondition Failed"],[b.RequestEntityTooLarge,"Request Entity Too Large"],[b.RequestURITooLong,"Request URI Too Long"],[b.UnsupportedMediaType,"Unsupported Media Type"],[b.RequestedRangeNotSatisfiable,"Requested Range Not Satisfiable"],[b.ExpectationFailed,"Expectation Failed"],[b.Teapot,"I'm a teapot"],[b.MisdirectedRequest,"Misdirected Request"],[b.UnprocessableEntity,"Unprocessable Entity"],[b.Locked,"Locked"],[b.FailedDependency,"Failed Dependency"],[b.TooEarly,"Too Early"],[b.UpgradeRequired,"Upgrade Required"],[b.PreconditionRequired,"Precondition Required"],[b.TooManyRequests,"Too Many Requests"],[b.RequestHeaderFieldsTooLarge,"Request Header Fields Too Large"],[b.UnavailableForLegalReasons,"Unavailable For Legal Reasons"],[b.InternalServerError,"Internal Server Error"],[b.NotImplemented,"Not Implemented"],[b.BadGateway,"Bad Gateway"],[b.ServiceUnavailable,"Service Unavailable"],[b.GatewayTimeout,"Gateway Timeout"],[b.HTTPVersionNotSupported,"HTTP Version Not Supported"],[b.VariantAlsoNegotiates,"Variant Also Negotiates"],[b.InsufficientStorage,"Insufficient Storage"],[b.LoopDetected,"Loop Detected"],[b.NotExtended,"Not Extended"],[b.NetworkAuthenticationRequired,"Network Authentication Required"]]);function R(e,t){const r=new p(t);let n=!1;const i=[];return{read:async function(s){if(n)return null;const[a]=i;if(a){const e=a.data.byteLength-a.offset,t=Math.min(e,s.byteLength);for(let e=0;e<t;e++)s[e]=a.data[a.offset+e];if(a.offset+=t,a.offset===a.data.byteLength&&(i.shift(),null===await r.readLine()))throw new Deno.errors.UnexpectedEof;return t}const h=await r.readLine();if(null===h)throw new Deno.errors.UnexpectedEof;const[c]=h.split(";"),l=parseInt(c,16);if(Number.isNaN(l)||l<0)throw new Error("Invalid chunk size");if(l>0){if(l>s.byteLength){let e=await t.readFull(s);if(null===e)throw new Deno.errors.UnexpectedEof;const r=new Uint8Array(l-s.byteLength);if(e=await t.readFull(r),null===e)throw new Deno.errors.UnexpectedEof;return i.push({offset:0,data:r}),s.byteLength}{const e=s.subarray(0,l);if(null===await t.readFull(e))throw new Deno.errors.UnexpectedEof;if(null===await r.readLine())throw new Deno.errors.UnexpectedEof;return l}}if(o(0===l),null===await t.readLine())throw new Deno.errors.UnexpectedEof;return await async function(e,t){const r=function(e){if(null==e)return;const t=e.split(",").map(e=>e.trim().toLowerCase());if(0===t.length)throw new Deno.errors.InvalidData("Empty trailer header.");const r=t.filter(e=>m(e));if(r.length>0)throw new Deno.errors.InvalidData(`Prohibited trailer names: ${Deno.inspect(r)}.`);return new Headers(t.map(e=>[e,""]))}(e.get("trailer"));if(null==r)return;const n=[...r.keys()],i=new p(t),o=await i.readMIMEHeader();if(null==o)throw new Deno.errors.InvalidData("Missing trailer header.");const s=[...o.keys()].filter(e=>!n.includes(e));if(s.length>0)throw new Deno.errors.InvalidData(`Undeclared trailers: ${Deno.inspect(s)}.`);for(const[t,r]of o)e.append(t,r);const a=n.filter(e=>!o.has(e));if(a.length>0)throw new Deno.errors.InvalidData(`Missing trailers: ${Deno.inspect(a)}.`);e.delete("trailer")}(e,t),n=!0,null}}}function m(e){return new Set(["transfer-encoding","content-length","trailer"]).has(e.toLowerCase())}async function E(t,r){const n=r.status||200,i=L.get(n),s=d.create(t);if(!i)throw new Deno.errors.InvalidData("Bad status code");r.body||(r.body=new Uint8Array),"string"==typeof r.body&&(r.body=e.encode(r.body));let a=`HTTP/1.1 ${n} ${i}\r\n`;const h=r.headers??new Headers;r.body&&!h.get("content-length")&&(r.body instanceof Uint8Array?a+=`content-length: ${r.body.byteLength}\r\n`:h.get("transfer-encoding")||(a+="transfer-encoding: chunked\r\n"));for(const[e,t]of h)a+=`${e}: ${t}\r\n`;a+="\r\n";const c=e.encode(a);if(o(await s.write(c)===c.byteLength),r.body instanceof Uint8Array){o(await s.write(r.body)===r.body.byteLength)}else if(h.has("content-length")){const e=h.get("content-length");o(null!=e);const t=parseInt(e);o(await Deno.copy(r.body,s)===t)}else await async function(t,r){const n=d.create(t);for await(const t of Deno.iter(r)){if(t.byteLength<=0)continue;const r=e.encode(t.byteLength.toString(16)+"\r\n"),i=e.encode("\r\n");await n.write(r),await n.write(t),await n.write(i)}const i=e.encode("0\r\n\r\n");await n.write(i)}(s,r.body);if(r.trailers){const t=await r.trailers();await async function(t,r,n){const i=r.get("trailer");if(null===i)throw new TypeError("Missing trailer header.");const o=r.get("transfer-encoding");if(null===o||!o.match(/^chunked/))throw new TypeError(`Trailers are only allowed for "transfer-encoding: chunked", got "transfer-encoding: ${o}".`);const s=d.create(t),a=i.split(",").map(e=>e.trim().toLowerCase()),h=a.filter(e=>m(e));if(h.length>0)throw new TypeError(`Prohibited trailer names: ${Deno.inspect(h)}.`);const c=[...n.keys()].filter(e=>!a.includes(e));if(c.length>0)throw new TypeError(`Undeclared trailers: ${Deno.inspect(c)}.`);for(const[t,r]of n)await s.write(e.encode(`${t}: ${r}\r\n`));await s.write(e.encode("\r\n")),await s.flush()}(s,h,t)}await s.flush()}async function T(e,t){const r=new p(t),n=await r.readLine();if(null===n)return null;const i=await r.readMIMEHeader();if(null===i)throw new Deno.errors.UnexpectedEof;const o=new U;return o.conn=e,o.r=t,[o.method,o.url,o.proto]=n.split(" ",3),[o.protoMinor,o.protoMajor]=function(e){switch(e){case"HTTP/1.1":return[1,1];case"HTTP/1.0":return[1,0];default:{const t=1e6;if(!e.startsWith("HTTP/"))break;const r=e.indexOf(".");if(r<0)break;const n=e.substring(e.indexOf("/")+1,r),i=Number(n);if(!Number.isInteger(i)||i<0||i>t)break;const o=e.substring(r+1),s=Number(o);if(!Number.isInteger(s)||s<0||s>t)break;return[i,s]}}}(o.proto),o.headers=i,function(e){const t=e.headers.get("Content-Length");if(t){const r=t.split(",");if(r.length>1){const t=[...new Set(r.map(e=>e.trim()))];if(t.length>1)throw Error("cannot contain multiple Content-Length headers");e.headers.set("Content-Length",t[0])}const n=e.headers.get("Content-Length");if("HEAD"===e.method&&n&&"0"!==n)throw Error("http: method cannot contain a Content-Length");if(n&&e.headers.has("transfer-encoding"))throw new Error("http: Transfer-Encoding and Content-Length cannot be send together")}}(o),o}class U{constructor(){this.done=u(),this._contentLength=void 0,this._body=null,this.finalized=!1}get contentLength(){if(void 0===this._contentLength){const e=this.headers.get("content-length");e?(this._contentLength=parseInt(e),Number.isNaN(this._contentLength)&&(this._contentLength=null)):this._contentLength=null}return this._contentLength}get body(){if(!this._body)if(null!=this.contentLength)this._body=function(e,t){let r=0,n=!1;return{read:async function(i){if(n)return null;let o;const s=e-r;if(s>=i.byteLength)o=await t.read(i);else{const e=i.subarray(0,s);o=await t.read(e)}return null!==o&&(r+=o),n=r===e,o}}}(this.contentLength,this.r);else{const e=this.headers.get("transfer-encoding");if(null!=e){o(e.split(",").map(e=>e.trim().toLowerCase()).includes("chunked"),'transfer-encoding must include "chunked" if content-length is not set'),this._body=R(this.headers,this.r)}else this._body={read:e=>Promise.resolve(null)}}return this._body}async respond(e){let t;try{await E(this.w,e)}catch(e){try{this.conn.close()}catch{}t=e}if(this.done.resolve(t),t)throw t}async finalize(){if(this.finalized)return;const e=this.body,t=new Uint8Array(1024);for(;null!==await e.read(t););this.finalized=!0}}class N{constructor(e){this.listener=e,this.closing=!1,this.connections=[]}close(){this.closing=!0,this.listener.close();for(const e of this.connections)try{e.close()}catch(e){if(!(e instanceof Deno.errors.BadResource))throw e}}async*iterateHttpRequests(t){const r=new l(t),n=new d(t);for(;!this.closing;){let o;try{o=await T(t,r)}catch(t){(t instanceof Deno.errors.InvalidData||t instanceof Deno.errors.UnexpectedEof)&&await E(n,{status:400,body:(i=t.message+"\r\n\r\n",e.encode(i))});break}if(null===o)break;o.w=n,yield o;if(await o.done)return void this.untrackConnection(o.conn);await o.finalize()}var i;this.untrackConnection(t);try{t.close()}catch(e){}}trackConnection(e){this.connections.push(e)}untrackConnection(e){const t=this.connections.indexOf(e);-1!==t&&this.connections.splice(t,1)}async*acceptConnAndIterateHttpRequests(e){if(this.closing)return;let t;try{t=await this.listener.accept()}catch(t){if(t instanceof Deno.errors.BadResource||t instanceof Deno.errors.InvalidData||t instanceof Deno.errors.UnexpectedEof)return e.add(this.acceptConnAndIterateHttpRequests(e));throw t}this.trackConnection(t),e.add(this.acceptConnAndIterateHttpRequests(e)),yield*this.iterateHttpRequests(t)}[Symbol.asyncIterator](){const e=new f;return e.add(this.acceptConnAndIterateHttpRequests(e)),e.iterate()}}function q(e){"string"==typeof e&&(e=function(e){let t;try{const r=e.startsWith(":")?"0.0.0.0"+e:e;t=new URL("http://"+r)}catch{throw new TypeError("Invalid address.")}if(t.username||t.password||"/"!=t.pathname||t.search||t.hash)throw new TypeError("Invalid address.");return{hostname:t.hostname,port:""===t.port?80:Number(t.port)}}(e));const t=Deno.listen(e);return new N(t)}!async function(){const e=q({port:8e3});console.log("http://localhost:8000/");for await(const t of e)t.respond({body:"Hello World\n"})}();
